#!/bin/bash

readonly GITUSER="${GITUSER:-git}"
readonly GITHOME="/home/$GITUSER"
readonly GITZERO="0000000000000000000000000000000000000000"

absolute_path() {
  pushd "$(dirname $1)" > /dev/null
  local abspath="$(pwd -P)"
  popd > /dev/null
  echo "$abspath/$(basename $1)"
}

setup_git_user() {
  declare home_dir="$1" git_user="$2"
  useradd -d "$home_dir" "$git_user" || true
  mkdir -p "$home_dir/.ssh"
  touch "$home_dir/.ssh/authorized_keys"
  chown -R "$git_user" "$home_dir"
}

setup_receiver_script() {
  declare home_dir="$1" git_user="$2"
  local receiver_path="$home_dir/receiver"
  if [ ! -f "$receiver_path" ]; then
    cat > "$receiver_path" <<EOF
#!/bin/bash
#URL=http://requestb.in/rlh4znrl
#echo "----> Posting to \$URL ..."
#curl \\
#  -X 'POST' \\
#  -F "repository=\$1" \\
#  -F "revision=\$2" \\
#  -F "username=\$3" \\
#  -F "fingerprint=\$4" \\
#  -F contents=@- \\
#  --silent \$URL
EOF
  else
    echo "skipping \"$receiver_path\" since it already exists"
  fi
  chmod +x "$receiver_path"
  chown "$git_user" "$receiver_path"
}

generate_fingerprint() {
  awk '{print $2}' | base64 -d | md5sum | awk '{print $1}' | sed -e 's/../:&/2g'
}

install_authorized_key() {
  declare key="$1" name="$2" home_dir="$3" git_user="$4" self="$5"
  local fingerprint="$(echo "$key" | generate_fingerprint)"
  local forced_command="GITUSER=$git_user $self run $name $fingerprint"
  local key_options="command=\"$forced_command\",no-agent-forwarding,no-pty,no-user-rc,no-X11-forwarding,no-port-forwarding"
  echo "$key_options $key" >> "$home_dir/.ssh/authorized_keys"
}

strip_root_slash() {
  local str="$(cat)"
  if [ "${str:0:1}" == "/" ]; then
    echo "$str" | cut -c 2-
  else
    echo "$str"
  fi
}

parse_repo_from_ssh_command() {
  awk '{print $2}' | perl -pe 's/(?<!\\)'\''//g' | sed 's/\\'\''/'\''/g' | strip_root_slash
}

ensure_bare_repo() {
  declare repo_path="$1"
  if [ ! -d "$repo_path" ]; then
    mkdir -p "$repo_path"
    cd "$repo_path"
    git init --bare > /dev/null
    cd - > /dev/null
  fi
}

ensure_prereceive_hook() {
  declare repo_path="$1" home_dir="$2" self="$3"
  local hook_path="$repo_path/hooks/pre-receive"
  cd "$home_dir"
  cat > "$hook_path" <<EOF
#!/bin/bash
cat | $self hook
EOF
  chmod +x "$hook_path"
  cd - > /dev/null
}

ensure_postreceive_hook() {
  declare repo_path="$1" home_dir="$2" self="$3"
  local hook_path="$repo_path/hooks/post-receive"
  cd "$home_dir"
  cat > "$hook_path" <<EOF
#!/bin/bash
cat | $self post
EOF
  chmod +x "$hook_path"
  cd - > /dev/null
}

trigger_receiver() {
  declare repo="$1" user="$2" fingerprint="$3" home_dir="$4"
  while read oldrev newrev refname; do
    if [[ "$newrev" == "$GITZERO" ]]; then
      echo "Skipping delete operation"
    else
      git archive "$newrev" | "$home_dir/receiver" "$repo" "$newrev" "$user" "$fingerprint"
    fi
  done
}

# TODO This shares most code with trigger_receiver, refactor!
trigger_post_receive() {
  declare repo="$1" user="$2" fingerprint="$3" home_dir="$4"
  while read oldrev newrev refname; do
    if [[ "$newrev" == "$GITZERO" ]]; then
      echo "Skipping delete operation"
    fi
  done

  # Don't pass archive to this code, it can clone if it needs it
  "$home_dir/post-receive" "$repo" "$newrev" "$user" "$fingerprint"

}

strip_remote_prefix() {
  sed -u "s/^/"$'\e[1G'"/"
}

main() {
  set -euo pipefail

  readonly SELF="$(absolute_path $0)"

  case "$1" in
  # Public commands

    init) # gitreceive init
      setup_git_user "$GITHOME" "$GITUSER"
      setup_receiver_script "$GITHOME" "$GITUSER"
      echo "Created receiver script in $GITHOME for user '$GITUSER'."
      ;;

    upload-key) # sudo gitreceive upload-key <username>
      declare name="$2"
      local key="$(cat)"
      install_authorized_key "$key" "$name" "$GITHOME" "$GITUSER" "$SELF"
      echo "$key" | generate_fingerprint
      ;;

  # Internal commands

    run)
      declare user="$2" fingerprint="$3"
      export RECEIVE_USER="$user"
      export RECEIVE_FINGERPRINT="$fingerprint"
      export RECEIVE_REPO="$(echo "$SSH_ORIGINAL_COMMAND" | parse_repo_from_ssh_command)"
      local repo_path="$GITHOME/$RECEIVE_REPO"
      ensure_bare_repo "$repo_path"
      ensure_prereceive_hook "$repo_path" "$GITHOME" "$SELF"
      ensure_postreceive_hook "$repo_path" "$GITHOME" "$SELF"
      cd "$GITHOME"
      git-shell -c "$(echo "$SSH_ORIGINAL_COMMAND" | awk '{print $1}') '$RECEIVE_REPO'"
      ;;

    hook)
      trigger_receiver "$RECEIVE_REPO" "$RECEIVE_USER" "$RECEIVE_FINGERPRINT" "$GITHOME" | strip_remote_prefix
      ;;

    post)
      trigger_post_receive "$RECEIVE_REPO" "$RECEIVE_USER" "$RECEIVE_FINGERPRINT" "$GITHOME" 2>&1 | strip_remote_prefix
      ;;

    *)
      echo "Usage: gitreceive <command> [options]"
      ;;
  esac
}

[[ "$0" == "$BASH_SOURCE" ]] && main $@
